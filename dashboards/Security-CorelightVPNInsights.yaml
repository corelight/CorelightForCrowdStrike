name: Security - Corelight VPN Insights
description: VPN Inferences - requires Encrypted Traffic VPN Insights package enabled
timeSelector: {}
sharedTimeInterval:
  enabled: true
  isLive: true
  start: 15m
filters:
  JqsembDakUuCXZJaw6S6OVYrja1136c5:
    queryPrefix: hassh != ""
    title: Exclude HC
  TWiRNkLyweZAm0hIATEsDDA5BWuQHMc6:
    queryPrefix: hassh = "*"
    title: Include HC
widgets:
  5843cb6c-a01e-45a1-800f-46016a22432f:
    x: 6
    y: 0
    height: 5
    queryString: |-
      #path=vpn
      ("_system_name"=?{system_name=*}) AND ("vpn_type"=?{vpn_type=*}) AND (?{additional_filter=*}) AND ("#repo"=?{fed_tenant=*})
      | inferences[0]="*"
      | concatArray(inferences, separator=", ", as=Inference_values)
      | timechart(span=auto, series=Inference_values, function=count())
    start: 12h
    width: 6
    options:
      legendPosition: bottom
      yAxisUnit: ''
      interpolation: ''
      xAxisTitle: ''
      legend: true
      horizontalPlotLineLabel: ''
      yAxisScale: linear
      plotType: area
      yAxisTitle: ''
      stacking: normal
    visualization: time-chart
    title: Inferences Over Time
    type: query
  a4ee2caf-d07f-47e2-94d8-d2f98cd7dd2b:
    x: 0
    y: 14
    height: 4
    queryString: |-
      #path=vpn
      ("_system_name"=?{system_name=*}) AND ("vpn_type"=?{vpn_type=*}) AND (?{additional_filter=*}) AND ("#repo"=?{fed_tenant=*})
      | inferences[0]="*"
      | concatArray(inferences, separator=", ", as=Inference_values)
    start: 24h
    width: 12
    options:
      columns: '[{"type":"field","fieldName":"@timestamp","width":210},{"type":"field","fieldName":"id.orig_h","width":154},{"type":"field","fieldName":"id.resp_h","width":154},{"type":"field","fieldName":"Inference_values","width":198},{"type":"field","fieldName":"@rawstring","width":4000}]'
      newestAtBottom: 'true'
      showOnlyFirstLine: 'false'
    visualization: list-view
    title: VPN Inference Log Data
    type: query
  b82c8bd2-4352-4eda-89c7-2645bedeeb2c:
    x: 6
    y: 5
    height: 5
    queryString: "#path=vpn\n(\"_system_name\"=?{system_name=*}) AND (\"vpn_type\"\
      =?{vpn_type=*}) AND (?{additional_filter=*}) AND (\"#repo\"=?{fed_tenant=*})\n| groupby(vpn_type) "
    visualization: pie-chart
    start: 12h
    width: 6
    title: VPN Types
    type: query
  c0e2293d-84de-48d4-89ee-98cf95a3085f:
    x: 0
    y: 0
    height: 5
    queryString: |-
      #path=vpn
      ("_system_name"=?{system_name=*}) AND ("vpn_type"=?{vpn_type=*}) AND (?{additional_filter=*}) AND ("#repo"=?{fed_tenant=*})
      | inferences[0]="*"
      | concatArray(inferences, separator=", ", as=Inference_values)
      | groupby(Inference_values)
    visualization: pie-chart
    start: 12h
    width: 6
    title: Inference Type
    type: query
  d84f186f-6f5e-4259-8541-dbdefa6ae37a:
    x: 0
    y: 5
    height: 5
    queryString: |-
      #path=vpn
      ("_system_name"=?{system_name=*}) AND ("vpn_type"=?{vpn_type=*}) AND (?{additional_filter=*}) AND ("#repo"=?{fed_tenant=*})
      | top([id.orig_h, vpn_type, resp_cc], limit=20)
    visualization: table-view
    start: 12h
    width: 6
    title: Top VPN Users
    type: query
  04784b2d-0256-41d6-a72a-772275171643:
    x: 0
    y: 18
    height: 4
    queryString: |-
      #path=vpn
      ("_system_name"=?{system_name=*}) AND ("vpn_type"=?{vpn_type=*}) AND (?{additional_filter=*}) AND ("#repo"=?{fed_tenant=*})
      | groupby([ja3, ja3s])
      | sort(_count, order=desc)
    visualization: table-view
    start: 7d
    width: 6
    title: VPN JA3 Finger Prints
    type: query
  2380750f-8843-4957-87ff-f67e41e98e6e:
    x: 0
    y: 10
    description: Includes other protocols like STUN and ipsec
    height: 4
    queryString: |-
      (#path=conn or #path=conn_red) AND ("#repo"=?{fed_tenant=*})
      | service=spicy*
      // Limit the connection to a few connection states that indicate an established connection.
      | conn_state != "S0"
      | iplocation(id.resp_h)
      | groupby([id.orig_h, id.resp_h, id.resp_p, proto, id.resp_h.country, service],
                  function=[sum(resp_bytes, as=resp_bytes_sum),
                            sum(orig_bytes, as=orig_bytes_sum),
                            count(as=number_of_conns)])

      | eval(Gigabytes=(((orig_bytes_sum+resp_bytes_sum)/1024)/1024)/1000) | format("%.2f", field=Gigabytes, as=Gigabytes)
      | Resp_Country := id.resp_h.country
      | select([id.orig_h, id.resp_h, id.resp_p, proto, Gigabytes, Resp_Country, service])
      | sort(Gigabytes, limit=20)
      | rdns(id.resp_h)
    visualization: table-view
    start: 24h
    width: 12
    title: Largest Transfers between host pairs over VPN (No Filters)
    type: query
$schema: https://schemas.humio.com/dashboard/v0.2.0
parameters:
  additional_filter:
    defaultValue: '*'
    label: Additional filter (Inference, K/V pair)
    order: 70
    type: text
  system_name:
    label: Corelight Sensor
    query: _system_name=* | groupby(_system_name, function=[tail(1), count()])
    timeInterval: 24h
    useDashboardTimeIfSet: true
    type: query
    defaultValue: '*'
    order: 10
    valueField: _system_name
  vpn_type:
    label: VPN Type
    query: '#path=vpn | groupby(vpn_type, function=[tail(1), count()])'
    timeInterval: 24h
    useDashboardTimeIfSet: true
    type: query
    defaultValue: '*'
    order: 50
    valueField: vpn_type
  fed_tenant:
    label: Tenant
    fileName: 'members.csv'
    defaultValue: '*'
    type: file
    order: 1
    valueField: 'members'
